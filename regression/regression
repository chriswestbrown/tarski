#!/bin/sh
# This is a regression test suite for Tarski.
# Make sure you compile Tarski with readline support first (for the native version)
# or compile the JavaScript version.
#
# 1. Create your input files *.in in arbitrary subfolders (do not use timestamps for subfolder names).
# 2. Run `./regression` to automatically create *.out files for each input. This may take a while...
# 3. Do some modifications on the program (hopefully only improvements), recompile it.
# 4. Run `./regression -r` to run a regression test.
# 5. Check the obtained information in a subfolder created from the current timestamp.
# 6. Fine tuning can be done via command line options and some .txt files (see help via option -h).

BINARY=../bin/tarski # override it with -b <full-path-to-executable>

OVERWRITE=0
TIMEOUT=300 # 5 minutes
HEAVY=0
INFEASIBLE=0
AMBIGUOUS=0
REGRESSION=0
SILENT=0
FOLDER=.
NUMCELLS=50000000
OUTPUTDIR=""
QUIT=0
WEB=0
SAMPLES=100 # Use so many startups of native Tarski to find its minimal startup time.
STARTUPTIME=1000 # Be pessimistic.

# Platform detection
PLATFORM=`uname -s`
if [ "$PLATFORM" = Linux ]; then
 TIMEHEAD=2
else
 if [ "$PLATFORM" = Darwin ]; then
  TIMEHEAD=1
 else
  # Assuming TIMEHEAD=2 will be okay:
  TIMEHEAD=2
  fi
 fi

export LC_ALL=C

log() {
 DATE=`date +%T`
 echo "$DATE $*"
 }

output() { # <xmlfile> <time> <failures> <name> "[message]"
 XML=$1
 TIME=$2
 FAILS=$3
 NAME=$4
 MESSAGE="$5"
 TIMESTAMP=`date +%Y-%m-%dR%H:%M:%S`
 echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > $XML
 echo "<testsuites name=\"$BINARY regression test\" time=\"$TIME\" tests=\"1\" failures=\"$FAILS\">" >> $XML
 echo " <testsuite name=\"$NAME\" timestamp=\"$TIMESTAMP\" tests=\"1\" file=\"$NAME.out\" time=\"$TIME\" failures=\"$FAILS\">" >> $XML
 echo "  <testcase name=\"$NAME\" time=\"$TIME\">" >> $XML
 if [ "$FAILS" = 1 -a "$MESSAGE" != "" ]; then
  echo "   <failure message=\"$MESSAGE\"></failure>" >> $XML
  fi
 echo "  </testcase>" >> $XML
 echo " </testsuite>" >> $XML
 echo "</testsuites>" >> $XML
 }

usage() {
 echo "$0 - a regression test suite for Tarski."
 echo "Usage:"
 echo " $0 [options]"
 echo "  where options can be as follows (defaults in parentheses):"
 echo "   -r           run a regression test (if not specified, it creates the remaining .out files)"
 echo "   -f           overwrite existing .out files (on creation only)"
 echo "   -H           run heavy tests also (listed in file heavy.txt)"
 echo "   -I           run infeasible tests also (listed in file infeasible.txt)"
 echo "   -A           run ambiguous tests also (listed in file ambiguous.txt)"
 echo "   -s           be silent: do not exit with error code when there is a regression"
 echo "   -Q           exit immediately if error 11 is occurred"
 echo "   -S <number>  set regression output directory to the given number"
 echo "   -t <number>  timeout: exit from a single test after the given number of seconds ($TIMEOUT)"
 echo "   -b <path>    use the given binary (or .js) for testing ($BINARY)"
 echo "   -w           test the web version"
 echo "   -T <folder>  run tests only in folder ($FOLDER)"
 echo "   -n <cells>   invoke Tarski with +Ncells ($NUMCELLS)"
 echo "   -h           show this help"
 exit 0
 }

while getopts "t:T:b:n:S:rfhHIAsQw" OPT; do
 case $OPT in
  s)
   SILENT=1
   ;;
  Q)
   QUIT=1
   ;;
  r)
   REGRESSION=1
   ;;
  w)
   WEB=1
   if [ "$PLATFORM" = Darwin ]; then
    echo "Cannot run the web version on Mac, sorry..."
    exit 1
    fi
   ;;
  f)
   OVERWRITE=1
   ;;
  H)
   HEAVY=1
   ;;
  I)
   INFEASIBLE=1
   ;;
  A)
   AMBIGUOUS=1
   ;;
  t)
   TIMEOUT="$OPTARG"
   ;;
  T)
   FOLDER="$OPTARG"
   ;;
  b)
   BINARY="$OPTARG"
   ;;
  n)
   NUMCELLS="$OPTARG"
   ;;
  S)
   OUTPUTDIR="$OPTARG"
   ;;
  h)
   usage
   ;;

 esac
done

export BINARY # for the awk script below (intelligent diff)

test -r $BINARY || {
 echo "Cannot find $BINARY"
 exit 2
 }

SAVEDIR=.

if [ "$REGRESSION" = 1 ]; then
 SAVEDIR=`date +%Y%m%d%H%M%S`
 if [ "$OUTPUTDIR" != "" ]; then
  SAVEDIR=$OUTPUTDIR
  fi
 mkdir -p $SAVEDIR
 echo 0 > $SAVEDIR/.good
 echo 0 > $SAVEDIR/.bad
 fi
echo 0 > $SAVEDIR/.ignored

if [ "$WEB" = 1 ]; then
 # Prepare the web version...
 WEBDIR=web.tmp
 # rm -fr $WEBDIR
 mkdir -p $WEBDIR
 echo "Tarski().then(function(Module) {
 var numcells = $NUMCELLS;
 var timeout = $TIMEOUT;
 TARSKIINIT = Module.cwrap(\"TARSKIINIT\", 'void', ['number', 'number']);
 TARSKIEVAL = Module.cwrap(\"TARSKIEVAL\", \"string\", [\"string\"]);
 TARSKIEND = Module.cwrap(\"TARSKIEND\", \"void\", []);
 TARSKIINIT(numcells, timeout);
 myinit(); // Start your program in the function myinit()...
});" > $WEBDIR/tarski-loader.js
 cp $BINARY $WEBDIR
 echo "const puppeteer = require('puppeteer');
  const path = require('path');
  (async() => {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  page.on('pageerror', pageerr=> { console.log('ERROR'); console.log(pageerr); });
  await page.goto(\`file:\${path.join(__dirname, 'test.html')}\`, {waitUntil: 'networkidle2'});
  page.waitForSelector('#finished', {timeout: ${TIMEOUT}000, visible: true});
  const result = await page.\$eval(\"div#result\", (el) => el.innerHTML);
  const timing =  await page.\$eval(\"div#timing\", (el) => el.innerHTML);
  console.log(timing);
  console.log(result);
  await browser.close();
  })();" > $WEBDIR/tester.js
 cd $WEBDIR
 mkdir -p node_modules
 npm i --silent --save puppeteer # Install Puppeteer...
 cd ..
else
 # Measure startup of the native version
 if [ $REGRESSION = 1 ]; then
  for i in `seq 1 $SAMPLES`; do
   /usr/bin/time $BINARY +N$NUMCELLS < /dev/null > /dev/null 2> /tmp/regression-time.tmp
   TIME=`cat /tmp/regression-time.tmp | tail -$TIMEHEAD | head -1 | cut -f1 -du`
   REGISTER=`echo "$TIME < $STARTUPTIME" | bc -q` # Decide by using bc
   if [ $REGISTER = 1 ]; then
    STARTUPTIME=$TIME
    echo -n "\rStartup time of native Tarski will be assumed to be $STARTUPTIME"
    fi
   done
  rm -f /tmp/regression-time.tmp
  echo
  fi # REGRESSION = 1
 fi # WEB = 1

TESTCASES=`find $FOLDER -name '*.in' | grep -v node_modules | wc -l | awk '{print $1}'`
I=0
IGNORED=0
find $FOLDER -name '*.in' | grep -v node_modules | sort | while read IN; do
 I=$((I+1))
 INDIRNAME=`dirname $IN`
 TESTNAME="$INDIRNAME"/`basename $IN .in`
 OUT=$TESTNAME.out
 if [ "$REGRESSION" = 1 -o "$OVERWRITE" = 1 -o ! -f $OUT ]; then
  IGNORE=0
  IGNORED=`cat $SAVEDIR/.ignored`
  if [ "$INFEASIBLE" = 0 ]; then
   grep -F --silent $IN infeasible.txt && IGNORE=1 
   fi
  if [ "$HEAVY" = 0 ]; then
   grep -F --silent $IN heavy.txt && IGNORE=1
   fi
  if [ "$AMBIGUOUS" = 0 ]; then
   grep -F --silent $IN ambiguous.txt && IGNORE=1
   fi
  IGNORED=$((IGNORED+IGNORE))
  echo $IGNORED > $SAVEDIR/.ignored
  if [ "$IGNORE" = 0 ]; then
   DATE=`date +%T`
   log "Processing $IN (#$I of $TESTCASES)"
   if [ "$REGRESSION" = 1 ]; then
    mkdir -p `dirname $SAVEDIR/$OUT`
    fi
   INFILE=`mktemp`
   test -r $INDIRNAME/.preamble && cat $INDIRNAME/.preamble >> $INFILE
   FILTER=...
   if [ "$WEB" = 0 ]; then
    test -r "$INDIRNAME"/.filter && FILTER=`cat "$INDIRNAME"/.filter` # For the web version this is disabled.
    fi
   export FILTER
   # This is extremely hacky. See https://www.gnu.org/software/gawk/manual/html_node/Gory-Details.html
   cat $IN | sed s/"&"/"\\\\&"/g | awk '{filter=ENVIRON["FILTER"]; sub(/\.\.\./, $0, filter); print filter}' >> $INFILE
   if [ "$WEB" = 1 ]; then
    echo "<html><body><script src=\"tarski.js\"></script>
     <script src=\"tarski-loader.js\"></script>
     <div id=\"status\">start</div><div id=\"result\"></div><div id=\"timing\">none</div>
     <div id=\"finished\" style=\"display:none\">computation ended</div>
     <script>function myinit() {
     var start = Date.now();
     document.getElementById(\"status\").innerHTML = \"computing\";
     var output1 = TARSKIEVAL(\`" > $WEBDIR/test.html
     cat $INFILE | sed s/display// | sed s/"\\\\"/"\\\\\\\\"/g >> $WEBDIR/test.html
     echo "\`);
     var output2 = output1.split(\"\\\\n\");
     var output = \"\";
     for (i=0; i<output2.length; i++) {
       if (output2[i].includes(\"Exception\") || output2[i].includes(\"error\"))
         output += output2[i];
       if (output2[i].endsWith(\":tar\"))
         output += output2[i].substring(0,output2[i].length-4);
       }
     var delta = Date.now() - start;
     document.getElementById(\"status\").innerHTML = \"finished\";
     document.getElementById(\"result\").innerHTML = output;
     document.getElementById(\"timing\").innerHTML = delta;
     document.getElementById(\"finished\").style.display = \"block\";
     }</script></body></html>" >> $WEBDIR/test.html
    cd $WEBDIR
    timeout -k $((TIMEOUT+10)) $((TIMEOUT+2)) node tester.js 2>/dev/null | sed s/"&gt;"/">"/g | sed s/"&lt;"/"<"/g > output.tmp
    RETVAL=$?
    if [ $RETVAL = 124 -o $RETVAL = 137 ]; then
     # The TERM or KILL signal was required to stop the process. That's bad.
     RETVAL=11 # We handle this equivalently to a signal 11 in the native version.
     fi
    cd ..
    TIME=$TIMEOUT

    cat $WEBDIR/output.tmp | head -1 | grep --silent ERROR && { # A JavaScript error occured. That can happen.
      RETVAL=`cat $WEBDIR/output.tmp | head -2 | tail -1`...]
      if [ "$RETVAL" = "[Error: RuntimeError: memory access out of bounds...]" ]; then # signal 11...
       RETVAL=11
       fi
     }

    TIMEMS=`head -1 $WEBDIR/output.tmp`
    if [ "$TIMEMS" != "" ]; then
     TIME=`echo "scale=3; $TIMEMS/1000" | bc -q`
     fi
    cat $WEBDIR/output.tmp | tail -n +2 | grep -v '^$' > $SAVEDIR/$OUT # empty lines will be removed from output
    ERROR=""
   else # WEB != 1
    if [ "$PLATFORM" != Darwin ]; then
     /usr/bin/time timeout -k $((TIMEOUT+2)) $TIMEOUT $BINARY +N$NUMCELLS $INFILE > $SAVEDIR/$OUT.tmp 2> $SAVEDIR/.stderr
    else
     /usr/bin/time timeout $TIMEOUT $BINARY +N$NUMCELLS $INFILE > $SAVEDIR/$OUT.tmp 2> $SAVEDIR/.stderr
     fi
    cat $SAVEDIR/$OUT.tmp | grep -v ^\> | grep -v ^\$ > $SAVEDIR/$OUT # remove input echoes, and empty lines (Mac)
    rm $SAVEDIR/$OUT.tmp # cleaning up
    TIME=`cat $SAVEDIR/.stderr | tail -$TIMEHEAD | head -1 | cut -f1 -du`
    TIME=`echo "if ($TIME > $STARTUPTIME) ($TIME - $STARTUPTIME) else 0" | bc -q`
    RETVAL=0
    ERROR=""
    if [ "$PLATFORM" != Darwin ]; then
     cat $SAVEDIR/.stderr | head -n -$TIMEHEAD | grep --silent terminated && { # "Command terminated with signal 11" (for example)
      ERROR=`cat $SAVEDIR/.stderr | head -n -$TIMEHEAD | grep -v terminated`
      RETVAL=`cat $SAVEDIR/.stderr | head -n -$TIMEHEAD | grep terminated | cut -f5 -d" "` # 11
      }
    else # head -n -... is not supported
     cat $SAVEDIR/.stderr | grep terminated && { # "Command terminated with signal 11" (for example)
      ERROR=?
      RETVAL=`cat $SAVEDIR/.stderr | grep terminated | cut -f5 -d" "` # 11
      }
     fi
    fi # WEB != 1
   rm $INFILE
   if [ "$RETVAL" != 0 ]; then
    if [ "$REGRESSION" = 1 -a $WEB = 0 ]; then
     cat $SAVEDIR/.stderr | head -n -$TIMEHEAD >> $SAVEDIR/$OUT
     fi
    log "Process exited with error $RETVAL"
    if [ "$RETVAL" = 11 -a $QUIT = 1 ]; then
     exit 1
     fi
    fi
   if [ "$REGRESSION" = 1 ]; then
    TESTOK=1 # being optimistic
    diff --strip-trailing-cr -U 1 $OUT $SAVEDIR/$OUT > $SAVEDIR/$OUT.diff
    if [ -s $SAVEDIR/$OUT.diff ]; then
     BAD=`cat $SAVEDIR/.bad`
     BAD=$((BAD+1))
     echo $BAD > $SAVEDIR/.bad
     log "Regression found in $OUT"
     TESTOK=0
     output $SAVEDIR/$TESTNAME.xml $TIME 1 $TESTNAME "$ERROR ($RETVAL)"
     fi # regression found
    if [ "$TESTOK" = 1 ]; then
     GOOD=`cat $SAVEDIR/.good`
     GOOD=$((GOOD+1))
     echo $GOOD > $SAVEDIR/.good
     output $SAVEDIR/$TESTNAME.xml $TIME 0 $TESTNAME
     rm -f $SAVEDIR/$OUT $SAVEDIR/$OUT.diff # cleaning up
     fi # test ok
    fi # regression test run
   fi # test should not be ignored
  fi
 done

log "All files have been processed"

if [ "$REGRESSION" = 1 ]; then
 BAD=`cat $SAVEDIR/.bad`
 GOOD=`cat $SAVEDIR/.good`
 IGNORED=`cat $SAVEDIR/.ignored`
 log "Summary: $GOOD good and $BAD bad results ($IGNORED ignored)"
 rm -f $SAVEDIR/.stderr # cleaning up
 if [ "$BAD" != 0 -a "$SILENT" = 0 ]; then
  exit 1
  fi
 fi

exit 0
