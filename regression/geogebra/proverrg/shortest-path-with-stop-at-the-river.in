(def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-ex V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-api-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (lambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-call G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V (get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equal? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) L) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equal? (t-type G) 6) (process G) G)) (expand F)))))) (epc [ex v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v5,v6,v7,v8,v9 [(v17>0) /\ (v18>0) /\ (v19>0) /\ (v14=0) /\ (v10=0) /\ (v12=-v8) /\ (v15=v7) /\ (v16=v8+1) /\ (v11=2 v13-v7) /\ (~((v17+v18-v19)>=0)) /\ (-v13+v7=0) /\ (v23 v5 v8-v23 v8-v23 v6 v7+v23 v6-1=0) /\ (v22 v5 v8-v22 v6 v7-1=0) /\ (v21 v8-1=0) /\ (v20 v6-1=0) /\ (v17^2-v5^2+2 v5 v9-v9^2-v6^2=0) /\ (v18^2-v7^2+2 v7 v9-v9^2-v8^2=0) /\ (-4 v13^2+4 v13 v5+4 v13 v7-v5^2-2 v5 v7-v7^2+v19^2-v6^2-2 v6 v8-v8^2=0)]])
