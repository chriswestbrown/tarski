(def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-ex V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-api-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (lambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-call G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V (get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equal? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) L) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equal? (t-type G) 6) (process G) G)) (expand F)))))) (epc [ex v10,v11,v12,v13,v14,v5,v6,v7,v8,v9 [(v13>0) /\ (v14>0) /\ (v5=-1/2) /\ (v7=1/2) /\ (v13=1) /\ (v6=v8) /\ (((v12>0) /\ ((-v11 v8+v12/2-v12+v8)>0) /\ ((v11 v8-v12/2)>0)) \/ ((0>v12) /\ (0>(-v11 v8+v12/2-v12+v8)) /\ (0>(v11 v8-v12/2)))) /\ (((v10>0) /\ ((-v9 v8+v10/2-v10+v8)>0) /\ ((v9 v8-v10/2)>0)) \/ ((0>v10) /\ (0>(-v9 v8+v10/2-v10+v8)) /\ (0>(v9 v8-v10/2)))) /\ (v8>0) /\ (~(1>=v14)) /\ (4 v8^2-3=0) /\ (-v10^2+2 v10 v12-v12^2-v11^2+2 v11 v9-v9^2+v14^2=0)]])
