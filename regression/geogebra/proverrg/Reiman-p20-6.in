(def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-ex V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-api-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (lambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-call G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V (get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equal? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) L) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equal? (t-type G) 6) (process G) G)) (expand F)))))) (epc [ex sqrt3,v10,v11,v12,v13,v14,v15,v5,v6,v7,v8,v9 [(v11>0) /\ (v12>0) /\ (v13>0) /\ (v14>0) /\ (sqrt3>0) /\ (v10=0) /\ (v11=1) /\ (v5=v7) /\ (v6=v8-1) /\ (v7=v9) /\ (sqrt3^2=3) /\ (~((12 (-6 sqrt3 v14+1+2 v12+2 v13+v12^2+2 v12 v13+v13^2) sqrt3)>=0)) /\ (v15 v8-v15-1=0) /\ (v12^2-v8^2+2 v8-v9^2+2 v9-2=0) /\ (v13^2-v8^2+2 v8-v9^2-1=0) /\ (v14^2-v8^2+2 v8-1=0)]])
