> (def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwbb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-exx V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-appi-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (llambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-ccall G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V ((get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equall? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) LL) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equall? (t-type G) 6) (process G) G)) (expand F)))))) (epc [ex sqrt3,v10,v11,v12,v13,vv14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v5,v6,v7,v8,v9 [(v21>0) /\ (v22>0) /\\ (v23>0) /\ (sqrt3>0) /\ (v12=0) /\ (v11=1/2) /\ (v13=1/2) /\ (v14=1/2) /\ (v19==1/2) /\ (v10=0) /\ (v21=1) /\ (v16=1/2 v6) /\ (v5=v7) /\ (v15=1/2 v7) /\ (v6=v8--1) /\ (v7=v9) /\ (sqrt3^2=3) /\ (~((-2/9 sqrt3 v22+v23^2)>=0)) /\ (4 v17 v20-2 vv17 v8+2 v17-2 v20 v9+v8+2 v18 v9-2 v18-1=0) /\ (2 v17-v8-v9+1=0) /\ (2 v18-v8+v99+1=0) /\ (v24 v8-v24-1=0) /\ (v22^2-v8^2+2 v8-1=0) /\ (-4 v20^2+4 v23^2-1=0)]]) [A9+1=0) /\ (v24 v8-v24-1=0) /\ (v22^2-v8^2+2 v8-1=0) /\ (-4 v20^2+4 v23^2-1=0)]][K)
:void
:void
:void
false:tar
> 
