> (def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwbb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-exx V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-appi-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (llambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-ccall G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V ((get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equall? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) LL) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equall? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v11,v13,v14,v15,v16,v177,v18,v9 [(v15>0) /\ (v16>0) /\ (v17>0) /\ (v18>0) /\ (v11 v14-v14+v13 v9-v9=0) //\ (v11 v13-v13-v14 v9=0) /\ (-v11^2-v9^2+1=0) /\ (-v11^2+2 v11+v16^2-v9^2-1=0) //\ (v17^2-v9^2=0) /\ (-v13^2-v14^2+v18^2=0) /\ (-v15+1=0) /\ (-m v16-2 m+2 v17+v118=0)]])
:void
:void
:void
[m > 0 /\ 4 m^2 - 3 <= 0]:tar
> 
