(def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-ex V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-api-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (lambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-call G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V (get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equal? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) L) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equal? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v10,v15,v16,v17,v18,v19,v20 [(v17>0) /\ (v18>0) /\ (v19>0) /\ (v20>0) /\ (2 v10 v16+v15-1=0) /\ (-2 v10 v15+v16=0) /\ (-4 v10^2+4 v18^2-1=0) /\ (-v10^2+v19^2=0) /\ (-v15^2+2 v15-v16^2+v20^2-1=0) /\ (-v17+1=0) /\ (-2 m v18-m+v19+2 v20=0)]])
