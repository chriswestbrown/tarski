> (def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwbb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-exx V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-appi-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (llambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-ccall G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V ((get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equall? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) LL) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equall? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v11,v12,v13,v14,v15,v166,v6,v9 [(v11>0) /\ (v12>0) /\ (v13>0) /\ (v14>0) /\ (v15>0) /\ (v16 v6-1=0) /\ ((v12^2-v6^2-4 v9^2+4 v9-1=0) /\ (v13^2-v6^2-4 v9^2=0) /\ (4 v14^2-4 v6^2-16 v9^2++8 v9-1=0) /\ (4 v15^2-v6^2-4 v9^2+8 v9-4=0) /\ (-v11+1=0) /\ (-m v12-m v13-m+v144+v15=0)]])
:void
:void
:void
