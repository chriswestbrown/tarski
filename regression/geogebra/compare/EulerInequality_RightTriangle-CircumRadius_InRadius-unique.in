(def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-ex V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-api-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (lambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-call G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V (get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equal? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) L) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equal? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v15,v18,v19,v20,v21,v22,v23,v24,v31,v32,v7,v8 [(v31>0) /\ (v32>0) /\ (v19^2-2 v19 v23+v23^2-2 v20 v24+v24^2=0) /\ (-2 v19 v21+2 v19 v23+v21^2-v23^2-2 v20 v22+2 v20 v24+v22^2-v24^2=0) /\ (2 v15 v18-v15 v8-2 v18+v8=0) /\ (2 v15-v8-2=0) /\ (-v20 v8+v8 v22=0) /\ (v21 v8-v8=0) /\ (-v19-v20 v8+v8 v24+v23=0) /\ (v23 v8-v24=0) /\ (-4 v18^2+4 v31^2-1=0) /\ (-v20^2+v32^2=0) /\ (-m v32+v31=0) /\ (v7-1=0) /\ (((v20>0) /\ ((-v19 v8+v20 v7-v20+v8)>0) /\ ((v19 v8-v20 v7)>0)) \/ ((0>v20) /\ (0>(-v19 v8+v20 v7-v20+v8)) /\ (0>(v19 v8-v20 v7))))]])
