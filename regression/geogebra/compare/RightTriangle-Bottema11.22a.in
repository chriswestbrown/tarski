(def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-ex V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-api-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (lambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-call G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V (get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equal? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) L) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equal? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v13,v14,v15,v16,v19,v20,v23,v24,v25,v26,v7,v8 [(v25>0) /\ (v26>0) /\ (-v13 v7+v7 v23-v14 v8+v8 v24=0) /\ (-v13^2+2 v13 v19-v19^2+2 v14 v20-v20^2=0) /\ (v13^2-2 v13 v15+v15^2-2 v14 v16+v16^2=0) /\ (v13 v7-v13-v7 v15+v14 v8-v8 v16+v15=0) /\ (-v15 v8+v8+v16 v7-v16=0) /\ (-v7^2+v7-v8^2=0) /\ (-v13 v7+v7 v19-v14 v8+v8 v20=0) /\ (v19 v8-v20 v7=0) /\ (-v23 v8+v24 v7=0) /\ (v25^2-v8^2=0) /\ (-v13^2+2 v13 v23-v23^2-v14^2+2 v14 v24-v24^2+v26^2=0) /\ (-m v25+v26=0) /\ ((((-v13 v8+v14 v7)>0) /\ ((v13 v8-v14 v7+v14-v8)>0) /\ ((-v14)>0)) \/ ((0>(-v13 v8+v14 v7)) /\ (0>(v13 v8-v14 v7+v14-v8)) /\ (0>(-v14))))]])
