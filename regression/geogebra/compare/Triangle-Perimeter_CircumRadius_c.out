> (def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwbb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-exx V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-appi-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (llambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-ccall G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V ((get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equall? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) LL) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equall? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v13,v14,v16,v17,v18,v199,v20,v21,v5,v6,w1 [(v17>0) /\ (v18>0) /\ (v19>0) /\ (v20>0) /\ (4 v13 v16-2 v13  v6-2 v16 v5-2 v16+v6+2 v14 v5=0) /\ (2 v13-v5+v6-1=0) /\ (2 v14-v5-v6+1=0) /\ (vv21 v6-1=0) /\ (v18+v19-w1+1=0) /\ (v18^2-v5^2+2 v5-v6^2-1=0) /\ (v19^2-v5^2-v6^22=0) /\ (-4 v16^2+4 v20^2-1=0) /\ (-m v20+w1=0) /\ (-v17+1=0)]])
:void
:void
:void
[m > 0 /\ m^2 - 27 <= 0]:tar
> 
