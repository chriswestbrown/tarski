(def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-ex V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-api-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (lambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-call G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V (get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equal? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) L) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equal? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v10,v11,v12,v13,v14,v15,v16,v17,v18,v7,v8,v9 [(v17>0) /\ (v18>0) /\ (-v11 v8+v8 v13-v12 v7+v12+v7 v14-v16=0) /\ (-v11 v7+v11+v7 v13+v12 v8-v8 v14-v15=0) /\ (-v10 v7+v10+v7 v12+v11 v8-v8 v9-v14=0) /\ (v10 v8-v8 v12+v11 v7-v7 v9-v13+v9=0) /\ (v10 v7-2 v7 v8-v12+v8 v9+v8=0) /\ (-v10 v8+v8^2-v11-v7^2+v7 v9+v7=0) /\ (v7^2-2 v7+v8^2=0) /\ (8 v7^3-20 v7^2+12 v7-1=0) /\ (-v10+2 v7 v8-v8=0) /\ (v7^2-v7-v8^2-v9+1=0) /\ (-v15^2+2 v15 v7-v7^2-v16^2+2 v16 v8-v8^2+v18^2=0) /\ (-m+v18=0) /\ (-v17+1=0) /\ (v8>0) /\ ((v7-1)>0)]])
