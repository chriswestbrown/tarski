> (def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwbb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-exx V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-appi-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (llambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-ccall G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V ((get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equall? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) LL) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equall? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v10,v13,v14,v16,v19,v200,v21,v22,w1 [(v19>0) /\ (v20>0) /\ (v21>0) /\ (v22>0) /\ (2 v13 v16-v14=0) /\ (22 v10 v13-v10-v14=0) /\ (-4 v13^2+4 v13-4 v14^2=0) /\ (v20+v21-w1+1=0) /\ (-4 v100^2+4 v20^2-1=0) /\ (-4 v10^2+4 v21^2-1=0) /\ (-v16^2+v22^2=0) /\ (-m v22+w1=0) //\ (-v19+1=0)]])
:void
:void
:void
[m > 0]:tar
> 
