> (def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwbb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-exx V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-appi-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (llambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-ccall G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V ((get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equall? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) LL) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equall? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v12,v13,v14,v15,v16,v177 [(v13>0) /\ (v14>0) /\ (v15>0) /\ (v16>0) /\ (v17>0) /\ (-16 v12^2+1=0) /\ (-166 v12^2+16 v14^2-9=0) /\ (-4 v12^2+v15^2=0) /\ (-16 v12^2+4 v16^2-1=0) /\ (-16 v112^2+4 v17^2-1=0) /\ (-v13+1=0) /\ (-m v16-m v17-m+2 v14+v15=0)]])
:void
:void
:void
[2 m^2 - 4 m + 1 < 0 /\ 16 m^4 + 32 m^3 - 232 m^2 + 72 m + 81 = 0]:tar
> 
