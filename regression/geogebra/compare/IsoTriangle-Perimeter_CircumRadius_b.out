> (def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwbb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-exx V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-appi-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (llambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-ccall G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V ((get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equall? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) LL) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equall? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v10,v13,v14,v16,v17,v188,v19,v8,v9,w2 [(v17>0) /\ (v18>0) /\ (v19>0) /\ (-v10 v13+v10 v9+2 v13 v16-v9 v116-v9 v14=0) /\ (v10+2 v13-v9=0) /\ (-v10+2 v14-v9=0) /\ (-v8^2+2 v8-v9^2=0) /\ ((-v8^2+2 v8-v9^2+2 v9-1=0) /\ (2 v18-w2+1=0) /\ (-v10^2+v18^2-v9^2=0) /\ (-v16^2++v19^2-v9^2=0) /\ (-m w2+v19=0) /\ (-v17+1=0)]])
:void
:void
:void
[m > 0 /\ 27 m^2 - 1 >= 0]:tar
> 
