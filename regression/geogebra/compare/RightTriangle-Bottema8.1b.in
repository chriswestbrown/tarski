(def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-ex V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-api-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (lambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-call G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V (get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equal? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) L) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equal? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex (4*v18^2-v8^2-1)/4,(4*v19^2-4*v8^2-1)/4,(4*v20^2-v8^2-4)/4,-*w2+w1,1-v15},aseval(evalfa(lvar([ (` x`)->of(` x`))(reoveW12,v16+v17-w2+1,v16^2-v8^2-1,v17^2-v8^2,w1,w2])),{v18+v19+v20-w1 [( (` x`)->of(` x`))(removeW12=0) /\ ({v18+v19+v20-w1=0) /\ (v16+v17-w2+1=0) /\ (v16^2-v8^2-1=0) /\ (v17^2-v8^2=0) /\ ((4 v18^2-v8^2-1)/4=0) /\ ((4 v19^2-4 v8^2-1)/4=0) /\ ((4 v20^2-v8^2-4)/4=0) /\ (-m w2+w1=0) /\ (1-v15}=0) /\ (m=0) /\ (w1=0) /\ (w2=0)]])
