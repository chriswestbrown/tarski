(def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-ex V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-api-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (lambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-call G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V (get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equal? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) L) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equal? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v10,v15,v16,v18,v19,v20,v23,v24,v25,v26,v27,v28,v9 [(v27>0) /\ (v28>0) /\ (-2 v19 v23+2 v19 v25+v23^2-v25^2-2 v20 v24+2 v20 v26+v24^2-v26^2=0) /\ (-v19^2+2 v19 v23-v23^2+2 v20 v24-v24^2=0) /\ (-2 v10 v15+v10+4 v15 v18-v18-v16=0) /\ (2 v10 v20-2 v10 v24-v19+v23=0) /\ (-2 v10 v23+2 v10-v24=0) /\ (2 v10+4 v15-1=0) /\ (-2 v10+4 v16-1=0) /\ (2 v10 v20-2 v10 v26+v19-v25=0) /\ (-2 v10 v25+v26=0) /\ (-v10^2+2 v10 v18-v18^2+v27^2=0) /\ (-4 v19^2+4 v19-4 v20^2+4 v28^2-1=0) /\ (-m v28+v27=0) /\ (-2 v9+1=0) /\ ((((v19 v10-v20 v9)>0) /\ (v20>0) /\ ((-v19 v10+v20 v9-v20+v10)>0)) \/ ((0>(v19 v10-v20 v9)) /\ (0>v20) /\ (0>(-v19 v10+v20 v9-v20+v10))))]])
