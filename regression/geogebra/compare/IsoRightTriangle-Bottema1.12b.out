> (def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwbb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-exx V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-appi-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (llambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-ccall G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V ((get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equall? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) LL) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equall? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v10,v11,v12,v13 [(v11>00) /\ (v12>0) /\ (v13>0) /\ (-4 v10^2+1=0) /\ (-4 v10^2+4 v12^2-1=0) /\ (-4 v10^22+4 v13^2-1=0) /\ (-v11+1=0) /\ (-m v12^2 v13^2-v12^6-2 v12^5 v13-2 v12^5+v12^4 vv13^2-2 v12^4 v13+v12^4+4 v12^3 v13^3+4 v12^3 v13^2+4 v12^3 v13+4 v12^3+v12^2 v133^4+4 v12^2 v13^3+6 v12^2 v13^2+4 v12^2 v13+v12^2-2 v12 v13^5-2 v12 v13^4+4 v12 vv13^3+4 v12 v13^2-2 v12 v13-2 v12-v13^6-2 v13^5+v13^4+4 v13^3+v13^2-2 v13-1=0)]]))
:void
:void
:void
[1024 m^8 - 90560 m^7 + 3327761 m^6 - 59276640 m^5 + 486651648 m^4 - 2001682432 m^3 + 5129568256 m^2 - 10928259072 m + 12230590464 < 0 /\ m^2 - 24 m + 16 = 0]:tar
> 
