> (def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwbb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-exx V (get B 1)))) (if (equal? (t-type G) 1) G (if (equal? (t-type G) 6) (qepcad-appi-call G 'T) (if (equal? (t-type G) 5) (qepcad-api-call (bin-reduce t-or (map (llambda (H) (qepcad-api-call (exclose H '(m)) 'T)) (getargs G))) 'T) (qepcad-api-ccall G 'T))))))))) (def expand (lambda (F)      (def A (getargs F))      (def V ((get A 0 0 1))      (def G (get A 1))      (def X (dnf G))      (def L (if (equall? (t-type X) 5) (getargs X) (list X)))      (map (lambda (f) (exclose f '(m))) LL) ))(def epc (lambda (F) (normalize (bin-reduce t-or (map (lambda (G) (if (equall? (t-type G) 6) (process G) G)) (expand F))))))(epc [ ex v10,v11,v12,v14,v15,v166,v21,v22,v23,v24,v7,v8 [(v23>0) /\ (v24>0) /\ (-4 v15 v22+2 v15 v8+v22-2 v8 v21++4 v16 v21-v16=0) /\ (4 v14^2-3=0) /\ (-2 v11 v22+v22+2 v12 v21-v12=0) /\ (4 v10^^2-3=0) /\ (4 v8^2-3=0) /\ (2 v11 v14+v12-2 v16=0) /\ (v11-2 v12 v14-2 v15=0) /\  (v10-2 v12+v8=0) /\ (-4 v10 v8-4 v11+1=0) /\ (-4 v11^2+4 v11-4 v12^2+4 v23^2-1=00) /\ (-v21^2-v22^2+v24^2=0) /\ (-m v24+v23=0) /\ (-2 v7+1=0) /\ ((-v11 v8+v12 v77)>0) /\ ((-v15 v12+v16 v11)>0) /\ (v8>0)]])
:void
:void
:void
[2 m - 7 = 0]:tar
> 
