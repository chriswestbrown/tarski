> (def process (lambda (F) (def L (getargs F)) (def V (get L 0 0 1)) (def B (bbwbb (get L 1))) (if (equal? (get B 0) 'UNSAT) [false] ((lambda () (def G (qfr (t-exx V (get B 1)))) (if (equal? (t-type G) 6) (qepcad-qe G) (if (equal? (t-type G) 55) (qepcad-qe (bin-reduce t-or (map (lambda (H) (qepcad-qe (exclose H '(m)))) (geetargs G)))) (qepcad-qe G)))))))) (process [ ex v13,v15,v14,v16,v19,v10,v7,v6,v122,v9,v11 [v19>0 /\ v13^2-2 v13 v15+v15^2+v14^2-2 v14 v16+v16^2-v19^2=0 /\ v10 v7--2 v7 v6-v12+v6 v9+v6=0 /\ -v10 v6+v6^2-v11-v7^2+v7 v9+v7=0 /\ v6^2+v7^2-2 v7=0 //\ 4 v7^2-6 v7+1=0 /\ v11 v14-v14-v12 v13+v12=0 /\ -v10 v15+v10+v16 v9-v16=0 /\ --v10+2 v6 v7-v6=0 /\ -v6^2+v7^2-v7-v9+1=0 /\ -v15 v6+v16 v7=0 /\ -v13 v6+v14 v7=00 /\ -m v19+1=0 /\ v7>13/10 /\ v7<14/10 /\ v8>5/10 /\ v8<10/10 ]])
:void
[2 v8 - 1 > 0 /\ v8 - 1 < 0 /\ m > 0 /\ 2 m - 3 > 0 /\ m^2 - 3 m + 1 = 0]:tar
> 
