; tests prenex conversion

(def expr (make-prenex [ ex x[x^2 + y^2 < 1] /\ ex x[ x y z = 1]]))
(def targ [ex x,xx0[y^2 + x^2 - 1 < 0 /\ y z xx0 - 1 = 0]])
(def res (if (equal? expr targ) "pass" "fail"))
(display res " : test prenex02 - a\n")

(def expr (make-prenex [ a > 0 /\ ex a[ a b c < 0 ]]))
(def targ [ex ax0[a > 0 /\ (b)(c)(ax0) < 0]])
(def res (if (equal? expr targ) "pass" "fail"))
(display res " : test prenex02 - b\n")

(def expr (make-prenex [ ex x[x^2 + y^2 < 1] \/ ex x[ x y z = 1]]))
(def targ [ex x,xx0[y^2 + x^2 - 1 < 0 \/ y z xx0 - 1 = 0]])
(def res (if (equal? expr targ) "pass" "fail"))
(display res " : test prenex02 - c\n")

(def expr (make-prenex [ a > 0 \/ ex a[ a b c < 0 ]]))
(def targ [ex ax0[a > 0 \/ (b)(c)(ax0) < 0]])
(def res (if (equal? expr targ) "pass" "fail"))
(display res " : test prenex02 - d\n")

(def expr (make-prenex [all x,y[x^2 + y^2 < z] /\ ex x[ x y z = 1]]))
(def targ [ex xx0[all x,yx0[yx0^2 - z + x^2 < 0 /\ y z xx0 - 1 = 0]]])
(def res (if (equal? expr targ) "pass" "fail"))
(display res " : test prenex02 - e\n")


