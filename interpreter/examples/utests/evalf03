; tests evalf on formulas with "extended" atoms, i.e. atoms with indexed root expressions

(def F [ x > _root_2 x^2 - 2 ])
(def Fp (evalf '(x) '(15/8) F))
(def res (equal? Fp [true]))
(display (if res "pass" "fail") " : test evalf03 - a\n")

(def F [ x > _root_2 x^2 - 2 ])
(def Fp (evalf '(x) '(5/8) F))
(def res (equal? Fp [false]))
(display (if res "pass" "fail") " : test evalf03 - b\n")

(def F [ x > _root_1 x^2 - 2 ])
(def Fp (evalf '(x) '(-15/8) F))
(def res (equal? Fp [false]))
(display (if res "pass" "fail") " : test evalf03 - c\n")

(def F [ x > _root_1 x^2 - 2 ])
(def Fp (evalf '(x) '(-5/8) F))
(def res (equal? Fp [true]))
(display (if res "pass" "fail") " : test evalf03 - d\n")

(def F [ x = _root_2 x^2 - 2 ])
(def Fp (evalf '(x) '(1414/1000) F))
(def res (equal? Fp [false]))
(display (if res "pass" "fail") " : test evalf03 - e\n")

(def F [ x = _root_1 x^2 - 2 ])
(def Fp (evalf '(x) '(-1414/1000) F))
(def res (equal? Fp [false]))
(display (if res "pass" "fail") " : test evalf03 - f\n")

(def F [ x = _root_2 (x - 1) (x - 2) ])
(def Fp (evalf '(x) '(1) F))
(def res (equal? Fp [false]))
(display (if res "pass" "fail") " : test evalf03 - g\n")

(def F [ x = _root_2 (x - 1) (x - 2) ])
(def Fp (evalf '(x) '(2) F))
(def res (equal? Fp [true]))
(display (if res "pass" "fail") " : test evalf03 - h\n")

(def F [ x = _root_2 (x - 1) (x - 2) + y ])
(def Fp (evalf '(x y) '(2 0) F))
(def res (equal? Fp [true]))
(display (if res "pass" "fail") " : test evalf03 - i\n")

(def F [ x = _root_1 (x - 1) (x - 2) + y ])
(def Fp (evalf '(x y) '(2 0) F))
(def res (equal? Fp [false]))
(display (if res "pass" "fail") " : test evalf03 - j\n")


