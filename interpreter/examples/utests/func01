; tests basic recursion in functions

; sums numbers in a list
(def f1 (lambda (x) (if (equal? x '()) 0 (+ (head x) (f1 (tail x))))))

; fibonocci  
(def f2 (lambda (x) (if (equal? x 0) 1 (if (equal? x 1) 1 (+ (f2 (- x 1)) (f2 (- x 2)))))))

(def expr (f1 '(3 4 5 6)))
(def targ 18)
(def res (if (equal? expr targ) "pass" "fail"))
(display res " : test func01 - a\n")

(def expr (f2 10))
(def targ 89)
(def res (if (equal? expr targ) "pass" "fail"))
(display res " : test func01 - b\n")
